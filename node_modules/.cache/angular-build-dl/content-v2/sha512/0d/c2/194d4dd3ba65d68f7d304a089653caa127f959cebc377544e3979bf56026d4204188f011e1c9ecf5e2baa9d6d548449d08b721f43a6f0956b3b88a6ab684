{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/commpanydet/commpanydet.component.ts","webpack:///src/app/commpanydet/commpanydet.component.html","webpack:///src/app/countries.service.ts","webpack:///src/app/emailverification/emailverification.component.ts","webpack:///src/app/emailverification/emailverification.component.html","webpack:///src/app/personaldet/personaldet.component.ts","webpack:///src/app/personaldet/personaldet.component.html","webpack:///src/app/welcome/welcome.component.ts","webpack:///src/app/welcome/welcome.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","redirectTo","pathMatch","component","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","CommpanydetComponent","Router","formobject","companyname","Email","Title","year","submitted","backbutton","imgurl","filetoupload","navigate","file","item","reader","FileReader","onload","event","target","result","readAsDataURL","onsubmit","Fileinput","backtoperson","CountriesService","http","url","get","providedIn","EmailverificationComponent","otp","PersonaldetComponent","country","usename","phone","mobNumberPattern","getCountries","allCountries","subscribe","data2","countryInfo","Countries","err","console","log","countryValue","stateInfo","States","onChangeCountry","WelcomeComponent","environment","production","bootstrapModule","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { PersonaldetComponent } from './personaldet/personaldet.component';\nimport { CommpanydetComponent } from './commpanydet/commpanydet.component';\nimport { EmailverificationComponent } from './emailverification/emailverification.component';\n\nconst routes: Routes = [\n  {path:'', redirectTo:'personal', pathMatch:'full'},\n  {path:'personal', component:PersonaldetComponent},\n  {path:'company', component:CommpanydetComponent},\n  {path:'Verification', component:EmailverificationComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Forms';\n}\n","<div class=\"topnav\">\n  <div class=\"first\">\n    <span class=\"dot\"> 1</span>\n    <a routerLink=\"personal\" >Personal Details</a>\n  \n    <div class=\"second\">\n      <span class=\"dot\">2</span>\n      <a routerLink=\"company\" >Company Details</a>\n    </div>\n    \n    <div class=\"third\">\n      <span class=\"dot\">3</span>\n      <a routerLink=\"Verification\" >Email Verification</a>\n    </div>\n    \n  \n  </div>\n</div>\n\n\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { PersonaldetComponent } from './personaldet/personaldet.component';\nimport { CommpanydetComponent } from './commpanydet/commpanydet.component';\nimport { EmailverificationComponent } from './emailverification/emailverification.component';\nimport { WelcomeComponent } from './welcome/welcome.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    PersonaldetComponent,\n    CommpanydetComponent,\n    EmailverificationComponent,\n    WelcomeComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-commpanydet',\n  templateUrl: './commpanydet.component.html',\n  styleUrls: ['./commpanydet.component.css']\n})\nexport class CommpanydetComponent implements OnInit {\n\n  formobject:any ={\n    companyname:'',\n    Email:'',\n    Title:'',\n    year:''\n  }\nsubmitted:boolean=false;\n  backbutton: boolean =false;\n  imgurl: string =\"/assets/image/logo1.jpg\";\n \n  filetoupload: File = null;\n  constructor(private Router: Router) { }\n\n  ngOnInit(): void {\n  }\n  onsubmit() {\n    this.submitted = true;\n    if (!this.formobject.companyname || !this.formobject.Email ||\n      !this.formobject.Title || !this.formobject.year) {\n      return;\n    }\n    this.Router.navigate(['/Verification']);\n  }\n  backtoperson(){\n    this.backbutton = true;\n    this.Router.navigate(['/personal']);\n  }\n  Fileinput(file: FileList){\n    this.filetoupload = file.item(0);\n\n    var reader = new FileReader();\n    reader.onload = (event:any) => {\n      this.imgurl =\"\";\n      this.imgurl = event.target.result;\n    }\n    reader.readAsDataURL(this.filetoupload);\n\n  }\n}\n","<form #name=\"ngForm\" (ngSubmit)=\"onsubmit();\">\n    <div class=\"headtop\">\n        <h2>Add Your Company Details</h2>\n        <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.Aenean commodo ligula eget dolor.</p>\n    </div>\n    <img [src]=\"imgurl\"  style=\"width:80px; height:80px; border-radius: 50%; margin-bottom: 15px; \">\n        <label class=\"custom-file-upload\">\n            <input type=\"file\" accept=\"image/*\" (change)=\"Fileinput($event.target.files);\"/>\n            Upload your company Logo.\n        </label>\n        <!-- <input type=\"file\" accept=\"image/*\" (change)=\"Fileinput($event,target.files);\"> -->\n        <!-- <button type=\"button\">Upload you copany Logo</button> -->\n    <div>\n        <!-- Company Name -->\n        <label class=\"label_focus\" for=\"companyname\">Company Name</label>\n        <input type=\"text\" name=\"companyname\" placeholder=\"Company Name\" required [(ngModel)]=\"formobject.companyname\"\n            #company=\"ngModel\" [ngClass]=\"{'alertbox':submitted && company.invalid}\" />\n    \n        <div *ngIf=\"submitted && company.invalid\" class=\"alert\">\n            Enter Company Name\n        </div>\n        <!-- Email Id -->\n        <label for=\"Email\">Email Id</label>\n        <input type=\"text\" name=\"Email\" placeholder=\"Email Id\" required [(ngModel)]=\"formobject.Email\"\n            #Emailid=\"ngModel\" [ngClass]=\"{'alertbox':submitted && Emailid.invalid}\" />\n    \n        <div *ngIf=\"submitted && Emailid.invalid\" class=\"alert\">\n            Enter Email Id\n        </div>\n    \n        <!-- Job Title -->\n        <label for=\"Title\">Job Title</label>\n        <input type=\"text\" name=\"Title\" placeholder=\"Job Title\" required [(ngModel)]=\"formobject.Title\"\n            #jbitle=\"ngModel\" [ngClass]=\"{'alertbox':submitted && jbitle.invalid}\" />\n    \n        <div *ngIf=\"submitted && jbitle.invalid\" class=\"alert\">\n            Enter Job Title\n        </div>\n        <!-- year -->\n        <label for=\"year\">Years Of Experience</label>\n        <input type=\"text\" name=\"year\" placeholder=\"Years Of Experience\" required [(ngModel)]=\"formobject.year\"\n            #yeare=\"ngModel\" [ngClass]=\"{'alertbox':submitted && yeare.invalid}\" />\n    \n        <div *ngIf=\"submitted && yeare.invalid\" class=\"alert\">\n            Enter Years Of Experience\n        </div>\n        <div class=\"check_bottom\">\n            <input type=\"checkbox\" required name=\"checkbox\" value=\"check\" /> \n            <span class=\"checkbox_span\">I accept the </span><a>Terms & Coditions</a>\n                 \n        </div>\n       \n\n        <button class=\"otp_Back\" type=\"button\" (click)=\"backtoperson();\">Back</button>\n        <button class=\"otp\" type=\"submit\" >Send OTP</button>\n    \n    \n    </div>\n</form>\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CountriesService {\n  url :string = \"https://raw.githubusercontent.com/sagarshirbhate/Country-State-City-Database/master/Contries.json\";\n\n  constructor(private http:HttpClient) { }\n  \n  allCountries(): Observable<any>\n  {\n    return this.http.get(this.url);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-emailverification',\n  templateUrl: './emailverification.component.html',\n  styleUrls: ['./emailverification.component.css']\n})\nexport class EmailverificationComponent implements OnInit {\n\n  formobject:any ={\n    otp:''\n  }\nsubmitted:boolean=false;\n  backbutton: boolean =false;\n\n  constructor(private Router: Router) { }\n\n  ngOnInit(): void {\n  }\n  onsubmit() {\n    this.submitted = true;\n    if (!this.formobject.otp ) {\n      return;\n    }\n    // this.Router.navigate(['/Verification']);\n  }\n  backtoperson(){\n    this.backbutton = true;\n    this.Router.navigate(['/company']);\n  }\n}","<form #name=\"ngForm\" (ngSubmit)=\"onsubmit();\">\n    <div class=\"headtop\">\n        <h2>Enter Your OTP</h2>\n        <p>For your security, we need to verify your identity. We send a 5-digit code to\n            <b>name@domain.com.</b> Please enter it below. </p>\n    </div>\n    <div class=\"otpbox\">\n        <input class=\"partitioned\" name=\"otp\" type=\"text\" maxlength=\"4\" required [(ngModel)]=\"formobject.otp\"\n        #otpid=\"ngModel\" />\n    </div>\n    \n\n        <!-- <button class=\"otp_Back\" type=\"button\" (click)=\"backtoperson();\"> Back</butotton> -->\n        <button class=\"otp_Back\" type=\"button\" (click)=\"backtoperson();\" >Back</button>\n        <button class=\"otp\" type=\"submit\" >Verify</button>\n    \n\n</form>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CountriesService } from '../countries.service';\n\n@Component({\n  selector: 'app-personaldet',\n  templateUrl: './personaldet.component.html',\n  styleUrls: ['./personaldet.component.css']\n})\nexport class PersonaldetComponent implements OnInit {\n\n  formobject:any ={\n    usename:'',\n    //  count:'',\n    // state:'',\n    phone:''\n  }\n\nsubmitted:boolean=false;\nmobNumberPattern = \"^((\\\\+91-?)|0)?[0-9]{10}$\";\nstateInfo: any;\ncountryInfo: any;\ncityInfo: any;\n\n  constructor(private Router: Router,private country:CountriesService) { }\n\n\n  ngOnInit(): void {\n    this.getCountries();\n  }\n  onsubmit() {\n    this.submitted = true;\n    if (!this.formobject.usename || !this.formobject.phone) {\n      return;\n    }\n    this.Router.navigate(['/company']);\n  }\n\n  getCountries(){\n    this.country.allCountries().subscribe(\n      (data2:any) => {\n        this.countryInfo=data2.Countries;\n      },\n\n      err => console.log(err),\n      () => console.log('complete')\n    )\n  }\n\n  onChangeCountry(countryValue:any) {\n    \n     this.stateInfo=this.countryInfo[countryValue].States;\n     console.log(this.stateInfo);\n  }\n\n  // onChangeState(stateValue) {\n  //   this.cityInfo=this.stateInfo[stateValue].Cities;\n  //   //console.log(this.cityInfo);\n  // }\n\n\n\n}\n","<form #name=\"ngForm\" (ngSubmit)=\"onsubmit();\">\n    <div class=\"headtop\">\n        <h2>Add Your Personal Details</h2>\n        <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.Aenean commodo ligula eget dolor.</p>\n    </div>\n       \n        <!-- Name -->\n        <label class=\"control-label\" for=\"usename\">Full Name</label>\n        <input type=\"text\" name=\"usename\" placeholder=\"Enter User Name\" required [(ngModel)]=\"formobject.usename\"\n            #username=\"ngModel\" [ngClass]=\"{'alertbox':submitted && username.invalid}\" />\n    \n        <div *ngIf=\"submitted && username.invalid\" class=\"alert\">\n            Enter Full Name\n        </div>\n       \n        <div class=\"gender\">\n            <div><label for=\"count\">Gender</label></div>\n            <button class=\"btn btn-default buttonspace\">Male</button>\n            <button class=\"btn btn-default buttonspace\">Femal</button>\n            <button class=\"btn btn-default buttonspace\">Other</button>\n        \n        </div>\n        <!-- Country -->\n        <label for=\"count\">Country</label>\n    \n        <select class=\"dropdown\" (Change)=\"onChangeCountry($event.target.value)\">\n            <option *ngFor=\"let country of countryInfo; let i = index\" value=\"{{i}}\">{{country.CountryName}}</option>\n          </select>  \n    \n        <!-- state -->\n        <label for=\"count\">state</label>\n       \n        <select   class=\"dropdown\" >\n            <option *ngIf=\"countryInfo == ''\" value=\"0\">--Select State--</option>\n            <option *ngFor=\"let state of stateInfo; let j = index\" value=\"{{j}}\">{{state.StateName}}</option>\n        </select>\n\n        <!-- Phone -->\n        <label for=\"phone\">Phone</label>\n        <input type=\"text\" name=\"count\" placeholder=\"Enter Phone No.\" required [(ngModel)]=\"formobject.phone\"\n            #phone=\"ngModel\"  [ngClass]=\"{'alertbox':submitted && phone.invalid}\" />\n    \n        <div *ngIf=\"submitted && phone.invalid\" class=\"alert\">Enter Phone No.</div>\n            <!-- <div *ngIf=\"phone.errors.pattern\"  class=\"alert\">  Phone number not valid.   </div>    -->\n        \n    \n        <button class=\"button\" type=\"submit\">Next</button>\n        \n   \n    <div >\n        <p class=\"bottom\">Already have an Account ?<a>Login</a></p>\n    </div>\n</form>\n<!-- <pre>\n    {{formobject | json}}\n</pre> -->","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-welcome',\n  templateUrl: './welcome.component.html',\n  styleUrls: ['./welcome.component.css']\n})\nexport class WelcomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>welcome works!</p>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}